{"version":3,"sources":["transitions/slide-250.module.css","components/Contact/Contact.module.css","components/Message/Message.module.css","components/ContactsList/ContactsList.module.css","components/FilterContacts/FilterContacts.module.css","components/App/App.module.css","transitions/slide-500.module.css","redux/phonebook/phonebookActions.js","redux/phonebook/phonebookTypes.js","redux/phonebook/phonebookReducers.js","redux/rootReducer.js","redux/store.js","redux/phonebook/phonebookSelectors.js","components/Message/Message.js","components/FormContacts/FormContacts.js","components/FormContacts/FormContactsContainer.js","components/Contact/Contact.js","components/ContactsList/ContactsList.js","components/ContactsList/ContactsListContainer.js","components/FilterContacts/FilterContacts.js","components/FilterContacts/FilterContactsContainer.js","components/App/App.js","components/App/AppContainer.js","index.js","components/FormContacts/FormContacts.module.css"],"names":["module","exports","addContact","createAction","contact","payload","takeContacts","contacts","deleteContact","id","filterUpdate","value","contactsReducer","createReducer","Actions","state","action","filter","filterReducer","reducer","combineReducers","rootReducer","phonebook","phonebookReducer","store","configureStore","getContacts","getFilter","getFiltredContacts","createSelector","filtred","name","toLowerCase","includes","Message","className","styles","Message__text","FormContacts","number","showError","handleChangeName","e","setState","target","handleChangeNumber","reset","errorMessage","prevState","setTimeout","handleSubmit","preventDefault","props","find","newContact","shortid","generate","addNewContact","this","CSSTransition","in","timeout","classNames","slideTransition","unmountOnExit","onSubmit","contacts__form","htmlFor","contacts__label","type","onChange","contacts__input","contacts__button","Component","connect","selectors","dispatch","data","actions","Contact","handleDeleteContact","item__name","item__right","onClick","item__button","ContactsList","TransitionGroup","component","contacts__list","map","key","list__items","FilterContacts","onFilter","placeholder","contacts__filter","App","saveContacts","localContacts","JSON","parse","localStorage","getItem","err","console","log","prevProps","setItem","stringify","main_wrapper","appear","length","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.c55ff56f.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"enter\":\"slide-250_enter__aoZsA\",\"enterActive\":\"slide-250_enterActive__2Fdqi\",\"exit\":\"slide-250_exit__1FNse\",\"exitActive\":\"slide-250_exitActive__1Svm2\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item__button\":\"Contact_item__button__1cAf0\",\"item__right\":\"Contact_item__right__3WKgs\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Message\":\"Message_Message__xlxJD\",\"Message__text\":\"Message_Message__text__14l8B\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"contacts__list\":\"ContactsList_contacts__list__U4YdS\",\"list__items\":\"ContactsList_list__items__3Qrdg\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"contacts__filter\":\"FilterContacts_contacts__filter__3EZ7J\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"main_wrapper\":\"App_main_wrapper__33VLY\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"appear\":\"slide-500_appear__2oGht\",\"appearActive\":\"slide-500_appearActive__3Sjvp\"};","import { createAction } from '@reduxjs/toolkit';\n\nimport * as types from './phonebookTypes';\n\nexport const addContact = createAction(types.ADD_CONTACT, contact => ({\n  payload: { contact },\n}));\n\nexport const takeContacts = createAction(types.TAKE_CONTACTS, contacts => ({\n  payload: { contacts },\n}));\n\nexport const deleteContact = createAction(types.DELETE_CONTACT, id => ({\n  payload: { id },\n}));\n\nexport const filterUpdate = createAction(types.FILTER_UPDATE, value => ({\n  payload: { value },\n}));\n\n/* Without redux toolkit */\n\n// export const addContact = contact => ({\n//   type: types.ADD_CONTACT,\n//   payload: { contact },\n// });\n\n// export const takeContacts = contacts => ({\n//   type: types.TAKE_CONTACTS,\n//   payload: { contacts },\n// });\n\n// export const deleteContact = id => ({\n//   type: types.DELETE_CONTACT,\n//   payload: { id },\n// });\n\n// export const filterUpdate = value => ({\n//   type: types.FILTER_UPDATE,\n//   payload: { value },\n// });\n","export const ADD_CONTACT = 'ADD_CONTACT';\nexport const TAKE_CONTACTS = 'TAKE_CONTACTS';\nexport const DELETE_CONTACT = 'DELETE_CONTACT';\nexport const FILTER_UPDATE = 'FILTER_UPDATE';\n","import { combineReducers } from 'redux';\nimport { createReducer } from '@reduxjs/toolkit';\n\n// import * as types from './phonebookTypes';\nimport * as Actions from './phonebookActions';\n\nconst contactsReducer = createReducer([], {\n  [Actions.addContact]: (state, action) => [action.payload.contact, ...state],\n  [Actions.takeContacts]: (state, action) => action.payload.contacts,\n  [Actions.deleteContact]: (state, action) =>\n    state.filter(contact => contact.id !== action.payload.id),\n});\n\nconst filterReducer = createReducer('', {\n  [Actions.filterUpdate]: (state, action) => action.payload.value,\n});\n\n/* Without redux toolkit */\n\n// const contactsReducer = (state = [], action) => {\n//   switch (action.type) {\n//     case types.ADD_CONTACT:\n//       return [action.payload.contact, ...state];\n\n//     case types.TAKE_CONTACTS:\n//       return action.payload.contacts;\n\n//     case types.DELETE_CONTACT:\n//       return state.filter(contact => contact.id !== action.payload.id);\n\n//     default:\n//       return state;\n//   }\n// };\n\n// const filterReducer = (state = '', action) => {\n//   switch (action.type) {\n//     case types.FILTER_UPDATE:\n//       return action.payload.value;\n\n//     default:\n//       return state;\n//   }\n// };\n\nconst reducer = combineReducers({\n  contacts: contactsReducer,\n  filter: filterReducer,\n});\n\nexport default reducer;\n","import { combineReducers } from 'redux';\n\nimport phonebookReducer from './phonebook/phonebookReducers';\n\nconst rootReducer = combineReducers({\n  phonebook: phonebookReducer,\n});\n\nexport default rootReducer;\n","import { configureStore } from '@reduxjs/toolkit';\nimport rootReducer from './rootReducer';\n\nconst store = configureStore({ reducer: rootReducer });\n\nexport default store;\n","import { createSelector } from 'reselect';\n\nexport const getContacts = store => store.phonebook.contacts;\n\nexport const getFilter = store => store.phonebook.filter;\n\nexport const getFiltredContacts = createSelector(\n  [getContacts, getFilter],\n  (contacts, filtred) =>\n    contacts.filter(contact =>\n      contact.name.toLowerCase().includes(filtred.toLowerCase()),\n    ),\n);\n","import React from 'react';\n\nimport styles from './Message.module.css';\n\nconst Message = () => {\n  return (\n    <div className={styles.Message}>\n      <p className={styles.Message__text}>Contact already exists</p>\n    </div>\n  );\n};\n\nexport default Message;\n","import React, { Component } from 'react';\n\nimport { CSSTransition } from 'react-transition-group';\n\nimport PropTypes from 'prop-types';\nimport shortid from 'shortid';\n\nimport styles from './FormContacts.module.css';\nimport slideTransition from '../../transitions/slide-250.module.css';\n\nimport Message from '../Message/Message';\n\nexport default class FormContacts extends Component {\n  static propTypes = {\n    addNewContact: PropTypes.func.isRequired,\n    contacts: PropTypes.arrayOf(\n      PropTypes.shape(FormContacts.propTypes).isRequired,\n    ).isRequired,\n  };\n\n  state = {\n    name: '',\n    number: '',\n    showError: false,\n  };\n\n  handleChangeName = e => {\n    this.setState({ name: e.target.value });\n  };\n\n  handleChangeNumber = e => {\n    this.setState({ number: e.target.value });\n  };\n\n  reset = () => {\n    this.setState({ name: '', number: '' });\n  };\n\n  errorMessage = () => {\n    this.setState(\n      prevState => ({\n        showError: !prevState.showError,\n      }),\n      () =>\n        setTimeout(() => {\n          this.setState(prevState => ({ showError: !prevState.showError }));\n        }, 2000),\n    );\n  };\n\n  handleSubmit = e => {\n    e.preventDefault();\n    const { name, number } = this.state;\n\n    if (!name || !number) return;\n\n    const sameContact = this.props.contacts.find(\n      contact => contact.name === name,\n    );\n\n    if (sameContact) {\n      this.errorMessage();\n\n      this.reset();\n      return;\n    }\n\n    const newContact = {\n      name,\n      number,\n      id: shortid.generate(),\n    };\n\n    this.props.addNewContact(newContact);\n\n    this.reset();\n  };\n\n  render() {\n    const { name, number, showError } = this.state;\n    return (\n      <>\n        <CSSTransition\n          in={showError}\n          timeout={250}\n          classNames={slideTransition}\n          unmountOnExit\n        >\n          <Message />\n        </CSSTransition>\n\n        <form onSubmit={this.handleSubmit} className={styles.contacts__form}>\n          <label\n            htmlFor={shortid.generate()}\n            className={styles.contacts__label}\n          >\n            Name\n            <input\n              type=\"text\"\n              value={name}\n              onChange={this.handleChangeName}\n              className={styles.contacts__input}\n            />\n          </label>\n          <label\n            htmlFor={shortid.generate()}\n            className={styles.contacts__label}\n          >\n            Number\n            <input\n              type=\"tel\"\n              value={number}\n              onChange={this.handleChangeNumber}\n              className={styles.contacts__input}\n            />\n          </label>\n          <button type=\"submit\" className={styles.contacts__button}>\n            Add contact\n          </button>\n        </form>\n      </>\n    );\n  }\n}\n","import { connect } from 'react-redux';\n\nimport * as actions from '../../redux/phonebook/phonebookActions';\nimport * as selectors from '../../redux/phonebook/phonebookSelectors';\n\nimport FormContacts from './FormContacts';\n\nconst mapStateToProps = store => ({\n  contacts: selectors.getContacts(store),\n});\n\nconst mapDispatchToProps = dispatch => ({\n  addNewContact: data => dispatch(actions.addContact(data)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(FormContacts);\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport styles from './Contact.module.css';\n\nconst Contact = ({ name, number, handleDeleteContact }) => (\n  <>\n    <p className={styles.item__name}>{name}</p>\n\n    <div className={styles.item__right}>\n      <p>{number}</p>\n      <button\n        type=\"button\"\n        onClick={handleDeleteContact}\n        className={styles.item__button}\n      />\n    </div>\n  </>\n);\n\nContact.propTypes = {\n  name: PropTypes.string.isRequired,\n  number: PropTypes.string.isRequired,\n  handleDeleteContact: PropTypes.func.isRequired,\n};\n\nexport default Contact;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { CSSTransition, TransitionGroup } from 'react-transition-group';\n\nimport Contact from '../Contact/Contact';\n\nimport styles from './ContactsList.module.css';\nimport slideTransition from '../../transitions/slide-250.module.css';\n\nconst ContactsList = ({ contacts, handleDeleteContact }) => (\n  <TransitionGroup component=\"ul\" className={styles.contacts__list}>\n    {contacts.map(contact => (\n      <CSSTransition\n        key={contact.id}\n        timeout={250}\n        classNames={slideTransition}\n      >\n        <li className={styles.list__items}>\n          <Contact\n            name={contact.name}\n            number={contact.number}\n            handleDeleteContact={() => handleDeleteContact(contact.id)}\n          />\n        </li>\n      </CSSTransition>\n    ))}\n  </TransitionGroup>\n);\n\nContactsList.propTypes = {\n  contacts: PropTypes.arrayOf(PropTypes.shape().isRequired).isRequired,\n  handleDeleteContact: PropTypes.func.isRequired,\n};\n\nexport default ContactsList;\n","import { connect } from 'react-redux';\n\nimport * as selectors from '../../redux/phonebook/phonebookSelectors';\nimport * as actions from '../../redux/phonebook/phonebookActions';\nimport ContactsList from './ContactsList';\n\nconst mapStateToProps = store => ({\n  contacts: selectors.getFiltredContacts(store),\n});\n\nconst mapDispatchToProps = dispatch => ({\n  handleDeleteContact: id => dispatch(actions.deleteContact(id)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactsList);\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport styles from './FilterContacts.module.css';\n\nconst FilterContacts = ({ filter, onFilter }) => (\n  <input\n    type=\"text\"\n    value={filter}\n    onChange={e => onFilter(e.target.value)}\n    placeholder=\"Filter...\"\n    className={styles.contacts__filter}\n  />\n);\n\nFilterContacts.propTypes = {\n  filter: PropTypes.string.isRequired,\n  onFilter: PropTypes.func.isRequired,\n};\n\nexport default FilterContacts;\n","import { connect } from 'react-redux';\n\nimport * as actions from '../../redux/phonebook/phonebookActions';\nimport * as selectors from '../../redux/phonebook/phonebookSelectors';\n\nimport FilterContacts from './FilterContacts';\n\nconst mapStateToProps = store => ({\n  filter: selectors.getFilter(store),\n});\n\nconst mapDispatchToProps = dispatch => ({\n  onFilter: data => dispatch(actions.filterUpdate(data)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(FilterContacts);\n","import React, { Component } from 'react';\nimport { CSSTransition } from 'react-transition-group';\nimport PropTypes from 'prop-types';\n\nimport FormContacts from '../FormContacts/FormContactsContainer';\nimport ContactsList from '../ContactsList/ContactsListContainer';\nimport FilterContacts from '../FilterContacts/FilterContactsContainer';\n\nimport styles from './App.module.css';\nimport slideTransition from '../../transitions/slide-500.module.css';\n\nexport default class App extends Component {\n  static propTypes = {\n    saveContacts: PropTypes.func.isRequired,\n    contacts: PropTypes.arrayOf(PropTypes.shape(App.propTypes).isRequired)\n      .isRequired,\n  };\n\n  componentDidMount() {\n    try {\n      const { saveContacts } = this.props;\n      const localContacts = JSON.parse(localStorage.getItem('contacts'));\n      if (localContacts) {\n        saveContacts(localContacts);\n      }\n    } catch (err) {\n      console.log(err);\n    }\n  }\n\n  componentDidUpdate(prevProps) {\n    try {\n      const { contacts } = this.props;\n      if (prevProps.contacts !== contacts) {\n        localStorage.setItem('contacts', JSON.stringify(contacts));\n      }\n    } catch (err) {\n      console.log(err);\n    }\n  }\n\n  render() {\n    const { contacts } = this.props;\n    return (\n      <div className={styles.main_wrapper}>\n        <CSSTransition in appear timeout={500} classNames={slideTransition}>\n          <h1>Phonebook</h1>\n        </CSSTransition>\n\n        <FormContacts />\n\n        <h2>Contacts</h2>\n        <FilterContacts />\n\n        {contacts.length > 0 && <ContactsList />}\n      </div>\n    );\n  }\n}\n","import { connect } from 'react-redux';\n\nimport App from './App';\n\nimport * as selectors from '../../redux/phonebook/phonebookSelectors';\nimport * as actions from '../../redux/phonebook/phonebookActions';\n\nconst mapStateToProps = store => ({\n  contacts: selectors.getContacts(store),\n});\n\nconst mapDispatchToPropst = dispatch => ({\n  saveContacts: data => dispatch(actions.takeContacts(data)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToPropst)(App);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport 'normalize.css';\nimport './main.css';\n\nimport store from './redux/store';\n\nimport App from './components/App/AppContainer';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root'),\n);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"contacts__form\":\"FormContacts_contacts__form__WxhyA\",\"contacts__label\":\"FormContacts_contacts__label__3qKxE\",\"contacts__input\":\"FormContacts_contacts__input__2pIWr\",\"contacts__button\":\"FormContacts_contacts__button__2BIpa\"};"],"sourceRoot":""}